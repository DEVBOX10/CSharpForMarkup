<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uno.Extensions.Hosting.WinUI</name>
    </assembly>
    <members>
        <member name="T:Uno.Extensions.Hosting.ApplicationExtensions">
            <summary>
            Extensions for the <see cref="T:Uno.Extensions.Hosting.IApplicationBuilder" />
            </summary>
        </member>
        <member name="M:Uno.Extensions.Hosting.ApplicationExtensions.CreateBuilder(Microsoft.UI.Xaml.Application,Microsoft.UI.Xaml.LaunchActivatedEventArgs)">
            <summary>
            Creates an instance of the <see cref="T:Uno.Extensions.Hosting.IApplicationBuilder" /> for the given <see cref="T:Microsoft.UI.Xaml.Application" />
            </summary>
            <param name="app">The <see cref="T:Microsoft.UI.Xaml.Application" /></param>
            <param name="args">The <see cref="T:Microsoft.UI.Xaml.LaunchActivatedEventArgs" /> passed to OnLaunched.</param>
            <returns></returns>
        </member>
        <member name="P:Uno.Extensions.Hosting.HostBuilder.Properties">
            <summary>
            A central location for sharing state between components during the host building process.
            </summary>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Set up the configuration for the builder itself. This will be used to initialize the <see cref="T:Microsoft.Extensions.Hosting.IHostEnvironment"/>
            for use later in the build process. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Microsoft.Extensions.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations, as well as in <see cref="P:Microsoft.Extensions.Hosting.IHost.Services"/>.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Overrides the factory used to create the service provider.
            </summary>
            <typeparam name="TContainerBuilder">The type of the builder to create.</typeparam>
            <param name="factory">A factory used for creating service providers.</param>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.UseServiceProviderFactory``1(System.Func{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0}})">
            <summary>
            Overrides the factory used to create the service provider.
            </summary>
            <param name="factory">A factory used for creating service providers.</param>
            <typeparam name="TContainerBuilder">The type of the builder to create.</typeparam>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.ConfigureContainer``1(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,``0})">
            <summary>
            Enables configuring the instantiated dependency container. This can be called multiple times and
            the results will be additive.
            </summary>
            <typeparam name="TContainerBuilder">The type of the builder to create.</typeparam>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostBuilder.Build">
            <summary>
            Run the given actions to initialize the host. This can only be called once.
            </summary>
            <returns>An initialized <see cref="T:Microsoft.Extensions.Hosting.IHost"/></returns>
        </member>
        <member name="T:Uno.Extensions.Hosting.HostEnvironmentExtensions">
            <summary>
            Extension methods for the IHostEnvironment type
            </summary>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostEnvironmentExtensions.FromHostEnvironment(Microsoft.Extensions.Hosting.IHostEnvironment,System.String,System.Reflection.Assembly)">
            <summary>
            Creats an IAppHostEnvironment from an IHostEnvironment
            </summary>
            <param name="host">The source IHostEnvironment</param>
            <param name="appDataPath">The app data path</param>
            <param name="hostAssembly">The host assembly</param>
            <returns></returns>
        </member>
        <member name="T:Uno.Extensions.Hosting.IApplicationBuilder">
            <summary>
            Defines an abstraction for building your application and App Host
            </summary>
        </member>
        <member name="P:Uno.Extensions.Hosting.IApplicationBuilder.App">
            <summary>
            Gets the instance of the Application being built
            </summary>
        </member>
        <member name="P:Uno.Extensions.Hosting.IApplicationBuilder.Arguments">
            <summary>
            Gets the startup arguments passed to OnLaunched
            </summary>
        </member>
        <member name="P:Uno.Extensions.Hosting.IApplicationBuilder.Window">
            <summary>
            Gets the initial startup Window for the Application
            </summary>
        </member>
        <member name="P:Uno.Extensions.Hosting.IApplicationBuilder.Properties">
            <summary>
            Gets stateful properties that Extensions can use to work with each other.
            </summary>
        </member>
        <member name="M:Uno.Extensions.Hosting.IApplicationBuilder.Configure(System.Action{Microsoft.Extensions.Hosting.IHostBuilder})">
            <summary>
            Adds a configuration delegate for the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />
            </summary>
            <param name="configureHost">Configuration Delegate</param>
            <returns>The <see cref="T:Uno.Extensions.Hosting.IApplicationBuilder" /></returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.IApplicationBuilder.Build">
            <summary>
            Invokes any supplied delegates passed to the <see cref="M:Uno.Extensions.Hosting.IApplicationBuilder.Configure(System.Action{Microsoft.Extensions.Hosting.IHostBuilder})"/> method
            and then calls the internal Build on the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.Hosting.IHost" /></returns>
        </member>
        <member name="T:Uno.Extensions.Hosting.IContentControlProvider">
            <summary>
            This is a marker interface to help <see cref="T:Uno.Extensions.Hosting.IApplicationBuilder" /> Extension methods determine
            the proper root content to use for Navigation
            </summary>
        </member>
        <member name="P:Uno.Extensions.Hosting.IContentControlProvider.ContentControl">
            <summary>
            Returns the Loading View for Navigation
            </summary>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostingHostBuilderExtensions.UseContentRoot(Microsoft.Extensions.Hosting.IHostBuilder,System.String)">
            <summary>
            Specify the content root directory to be used by the host. To avoid the content root directory being
            overwritten by a default value, ensure this is called after defaults are configured.
            </summary>
            <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> to configure.</param>
            <param name="contentRoot">Path to root directory of the application.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>.</returns>
        </member>
        <member name="M:Uno.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureCustomDefaults(Microsoft.Extensions.Hosting.IHostBuilder,System.String[])">
            <summary>
            Configures an existing <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> instance with pre-configured defaults. This will overwrite
            previously configured values and is intended to be called before additional configuration calls.
            </summary>
            <remarks>
              The following defaults are applied to the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>:
              <list type="bullet">
                <item><description>set the <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath"/> to the result of <see cref="M:System.IO.Directory.GetCurrentDirectory"/></description></item>
                <item><description>load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> from "DOTNET_" prefixed environment variables</description></item>
                <item><description>load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> from supplied command line args</description></item>
                <item><description>load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> from 'appsettings.json' and 'appsettings.[<see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName"/>].json'</description></item>
                <item><description>load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> from User Secrets when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName"/> is 'Development' using the entry assembly</description></item>
                <item><description>load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> from environment variables</description></item>
                <item><description>load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> from supplied command line args</description></item>
                <item><description>configure the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to log to the console, debug, and event source output</description></item>
                <item><description>enables scope validation on the dependency injection container when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName"/> is 'Development'</description></item>
              </list>
            </remarks>
            <param name="builder">The existing builder to configure.</param>
            <param name="args">The command line args.</param>
            <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> for chaining.</returns>
        </member>
    </members>
</doc>
